swagger: "2.0"
info:
  version: "1.0.0"
  title: Swagger Events
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: localhost:8080
basePath: /v2
schemes:
  - http
paths:
  /events:
    post:
      tags:
        - event
      summary: Create event
      description: ""
      operationId: addEvent
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Event object that needs to be added
          required: false
          schema:
            $ref: "#/definitions/Event"
      responses:
        "405":
          description: Invalid input
    put:
      tags:
        - event
      summary: Update an existing event
      description: ""
      operationId: updateEvent
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Event object that needs to be added
          required: false
          schema:
            $ref: "#/definitions/Event"
      responses:
        "405":
          description: Validation exception
        "404":
          description: Event not found
        "400":
          description: Invalid ID supplied
  
  /events/{eventId}:
    get:
      tags:
        - event
      summary: Find event by ID
      description: Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions
      operationId: getEventById
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: eventId
          description: ID of event that needs to be fetched
          required: true
          type: integer
          format: int64
      responses:
        "404":
          description: Event not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Event"
        "400":
          description: Invalid ID supplied
    post:
      tags:
        - event
      summary: Updates a event in the store with form data
      description: ""
      operationId: updatePetWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: eventId
          description: ID of event that needs to be updated
          required: true
          type: string
        - in: formData
          name: name
          description: Updated name of the event
          required: true
          type: string
        - in: formData
          name: status
          description: Updated status of the event
          required: true
          type: string
      responses:
        "405":
          description: Invalid input
    delete:
      tags:
        - event
      summary: Deletes a event
      description: ""
      operationId: deleteEvent
      produces:
        - application/json
        - application/xml
      parameters:
        - in: header
          name: api_key
          description: ""
          required: true
          type: string
        - in: path
          name: eventId
          description: Event id to delete
          required: true
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid pet value
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Created user object
          required: false
          schema:
            $ref: "#/definitions/NewUser"
      responses:
        default:
          description: successful operation
  /users/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      produces:
        - application/json
        - application/xml
      parameters:
        - in: query
          name: username
          description: The user name for login
          required: false
          type: string
        - in: query
          name: password
          description: The password for login in clear text
          required: false
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            type: string
        "400":
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      produces:
        - application/json
        - application/xml
      responses:
        default:
          description: successful operation
  /users/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: username
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          type: string
      responses:
        "404":
          description: User not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid username supplied
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: username
          description: name that need to be deleted
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        "404":
          description: User not found
        "400":
          description: Invalid user supplied
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: username
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        "404":
          description: User not found
        "400":
          description: Invalid username supplied
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
  NewUser:
      type: object
      properties:
        id:
          type: integer
        full_name:
          type: string
        password:
          type: string
        nickname:
          type: string
  Event:
     type: object
     required:
      - event-name
      - banner
      - phone
     properties:
        id:
          type: integer
        event-name:
          type: string
        infomation:
          type: string
        phone:
          type: number
        banner:
          $ref: '#/definitions/Image'
  Image:
     type: object
     properties:
        width:
          type: integer
        height: 
          type: integer
        url:
          type: string